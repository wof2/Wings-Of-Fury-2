<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAAAABoBQAAJgAAACAgAAAAAAAAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAEAB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wBKjqUArbLeADk8WgCUlpQAtef/AHN9zgAhJCkAY2VjAEqu
        1gBSVbUA3t/eAEJxhABrpr0Avbq9AGOCjADGx+8AOTw5ABgUEADOy84A5+v3AISO1gDO7/cApcfWAEpl
        cwDv+/8AztPvAPfz9wBripQAvcPGAL3D5wDv7/8A7+/vAJyanADn4+8Ac3XGAEJBWgDn394A3t/nACEg
        IQDv9/cAxsPnAMbHzgCtrtYAtba9APf7/wC15/cA//v/APf39wDv8/cA7+vvAM7P7wDGy+8Azs/OAISK
        1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBMCABAQEBAQEBAQEBASABATU3AzEB
        AQEBAQEBHCwWGwERJAQJJgEBAQEBJwklBzUBASMiEg0XAQEBLwoZBSMBAQEBASEYEBQBHg4GGgEBAQEB
        AQEBATAcARwBAQEBAQEBAQEBAQEBATMBAQEBAQEBAQEBAQEBATAdLgEBAQEBAQEBAQEBAQEyAikBAQEB
        AQEBAQEBAQEBNigMAQEBAQEBAQEBAQEBAQ8TNgEBAQEBAQEBAQEBAQEtCCsBAQEBAQEBAQEBAQEBHws0
        AQEBAQEBAQEBAQEBARUqIAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAIAAAA
        AACABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AKZq9AFJRUgCtqq0Ae9PvAHN51gDGx+8Ac32EACko
        KQBCTcYAa67GADlpewCcnt4AIShaAEK23gBaXZwA5+PnAJSSlADGx8YAnMPOAHN1rQApSVIAvef3AFpl
        xgBraWsAOYqlAFqatQB7mqUAnNPnANbz/wBSdXsAEBAQADk4OQCEjtYA1tfWABCSvQCtst4AY2GEANbb
        9wBCWWMAtdfnAISCnADv7/8AUsPnABgcIQCcnqUASkVCAGtxlACty9YAvcPeAISGhAAxOEoAMa7eAMbX
        3gDW0+cAAAwQAHN1cwDv//8A7+/vAL2+vQA5RUoAtbrnAPf39wDn5/cAzuv3AFpZWgDOz84AparWAGtx
        zgDe394AUrreAMbH1gCcy94Ae4bWACEkIQDe7/cAY2VjAJTX7wB7eXsAjJLeAKWmpQCMjowASk1KAM7T
        7wC93+8AUlWcADGKrQBjac4A3uP3AN7b5wC9w+8AhNfvAMbDvQCtrucAnJqcABgcGAB7gpwA9/P/AEJB
        QgDv6/cAOUFSAOfr7wC9vucArc/eAJSW3gBzcaUAjJbWAJSWnAAxSVIA3tv3ANbX3gDOz9YAxsfeAGNp
        xgClqt4AAAQAAP/7/wD39/8A7/v/AEJFQgD38/cASklKAO/v9wDv6+8A5+v3AFJVUgDe6/cA5+fvAOfn
        5wAQlr0A1tf3AN7b3gDOz+8Aa21rANbT1gDGy+8AxsPvAHNxcwC1tucAa3XOAK2u3gCUmt4AhIrWAJye
        nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQErYgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBYmIBAQEBK1tnVCsBAQEBAQEBAQEBAQEBAQEBAQEB
        QIU+B3YBAXaIc49pi1p1AQEBAQEBAQEBAQEBAQEBP28lUCJeVHUBJ14iWBgVbF07AQEBAQEBAQEBAQEB
        AXw8EmpyRWuLWQFkW2mMVjRjhgR8AQEBAQEBAQEBAQGBUYp4ZRAGjol9AQEriERhU0tgAy57AQEBAQEB
        AQEBTBQfSwkDKo2FKwEBAQF1gBOQhiEtDE46AQEBAQEBAR4FD1coGV8TQHUBAQEBAQEBAXxDUQgaAgt/
        AQEBAXUpRzUsXDETgXUBAQEBAQEBAQEBAQF1ZjYcbT1DAQEBURYbHUF3AQEBAQEBAQEBAQEBAQEBAQEB
        AQEjM4QBAQGHBDsBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAXUBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAXUBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBATsvEQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBhzhwAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQFVghcBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAUkkaAEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBOQBSAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAT9CAE8BAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBEXoAhnkBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQGHeABN
        gQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAUNTdBlGAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        E34gGSMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFIJg4wNwEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAYUGCkqDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBbmlKDUABAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQFkMjJxeQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>